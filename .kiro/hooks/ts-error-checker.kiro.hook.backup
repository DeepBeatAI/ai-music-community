{
  "enabled": true,
  "name": "Enhanced TypeScript Error Checker",
  "description": "Comprehensive TypeScript error detection with validation loop, iterative fixing, and safety mechanisms to ensure complete error resolution",
  "version": "3",
  "when": {
    "type": "multiple",
    "conditions": [
      {
        "type": "fileEdited",
        "patterns": [
          "**/*.ts",
          "**/*.tsx"
        ]
      },
      {
        "type": "taskCompleted",
        "patterns": ["**/*"]
      },
      {
        "type": "manual",
        "buttonText": "Check TypeScript Errors"
      }
    ]
  },
  "then": {
    "type": "askAgent",
    "prompt": "ENHANCED TYPESCRIPT VALIDATION REQUIRED: Execute a comprehensive multi-phase TypeScript error detection and resolution process with advanced error parsing, categorization, and detailed reporting.\n\n=== PHASE 1: INITIAL ERROR DETECTION AND PARSING ===\n1. Run `npx tsc --noEmit` in the client directory\n2. Parse TypeScript compiler output using detailed error analysis:\n   - Extract error code (e.g., TS2304, TS2322, TS2345)\n   - Extract file path and line/column numbers\n   - Extract error message text\n   - Generate unique error signature: \"[ERROR_CODE]:[FILE_PATH]:[LINE]:[COLUMN]\"\n3. Count total errors and report: \"üîç Initial Scan: Found [X] TypeScript errors\"\n4. Categorize errors using comprehensive classification:\n\n   **SYNTAX ERRORS (TS1xxx series):**\n   - TS1005: Expected token errors\n   - TS1109: Expression expected\n   - TS1128: Declaration or statement expected\n   - TS1161: Unterminated string literal\n   \n   **TYPE ERRORS (TS2xxx series):**\n   - TS2304: Cannot find name/identifier\n   - TS2322: Type assignment errors\n   - TS2345: Argument type mismatch\n   - TS2339: Property does not exist\n   - TS2571: Object is of type 'unknown'\n   - TS2740: Type missing required properties\n   \n   **IMPORT/MODULE ERRORS:**\n   - TS2307: Cannot find module\n   - TS2305: Module has no exported member\n   - TS2306: Not a module\n   - TS2503: Cannot find namespace\n   \n   **CONFIGURATION ERRORS:**\n   - TS5023: Unknown compiler option\n   - TS6053: File not under 'rootDir'\n   - TS6059: File is not in project\n\n5. Generate initial error report with categorization:\n   ```\n   üìä ERROR BREAKDOWN:\n   - Syntax Errors: [count] ([percentage]%)\n   - Type Errors: [count] ([percentage]%)\n   - Import/Module Errors: [count] ([percentage]%)\n   - Configuration Errors: [count] ([percentage]%)\n   - Other/Unclassified: [count] ([percentage]%)\n   ```\n\n6. If NO errors found: Report \"‚úÖ TypeScript Check Complete: No errors detected\" and STOP\n7. If errors found: Create ERROR_TRACKING_LOG and proceed to Phase 2\n\n=== PHASE 2: ITERATIVE ERROR RESOLUTION WITH DETAILED TRACKING ===\nInitialize comprehensive tracking:\n- ITERATION_COUNT = 1\n- MAX_ITERATIONS = 5\n- PREVIOUS_ERROR_SIGNATURES = []\n- FIXES_APPLIED = []\n- ERROR_TRACKING_LOG = {\n    initial_count: [number],\n    initial_breakdown: [category_counts],\n    iterations: []\n  }\n\nFor each iteration:\n1. **Error Analysis Phase:**\n   - Parse current TypeScript output\n   - Generate error signatures for comparison\n   - Categorize errors by type and priority\n   - Identify fixable vs complex errors\n\n2. **Targeted Fix Application:**\n   Apply fixes based on error category with detailed logging:\n   \n   **For SYNTAX ERRORS:**\n   - Fix missing semicolons, brackets, parentheses\n   - Correct malformed expressions\n   - Fix unterminated strings\n   - Log: \"üîß SYNTAX FIX: [file]:[line] - [description]\"\n   \n   **For TYPE ERRORS:**\n   - Add explicit type annotations\n   - Fix type mismatches with proper casting\n   - Add missing properties to objects\n   - Handle 'unknown' type assignments\n   - Log: \"üè∑Ô∏è TYPE FIX: [file]:[line] - [description]\"\n   \n   **For IMPORT/MODULE ERRORS:**\n   - Add missing import statements\n   - Fix incorrect import paths\n   - Update import syntax (default vs named)\n   - Log: \"üì¶ IMPORT FIX: [file]:[line] - [description]\"\n   \n   **For CONFIGURATION ERRORS:**\n   - Update tsconfig.json settings\n   - Fix path mappings\n   - Adjust compiler options\n   - Log: \"‚öôÔ∏è CONFIG FIX: [file]:[line] - [description]\"\n\n3. **Fix Documentation:**\n   For each fix applied, record:\n   ```\n   {\n     iteration: [number],\n     timestamp: [ISO_string],\n     file_path: \"[relative_path]\",\n     line_number: [number],\n     error_code: \"[TS_code]\",\n     error_category: \"[SYNTAX|TYPE|IMPORT|CONFIG]\",\n     original_error: \"[error_message]\",\n     fix_description: \"[what_was_changed]\",\n     fix_type: \"[specific_fix_category]\"\n   }\n   ```\n\n4. Proceed to Phase 3 for validation\n\n=== PHASE 3: VALIDATION AND LOOP CONTROL WITH PROGRESS TRACKING ===\n1. **Re-run TypeScript Check:**\n   - Execute `npx tsc --noEmit` again\n   - Parse new error output with same detailed analysis\n   - Generate current error signatures\n\n2. **Progress Analysis:**\n   - Compare current error count to previous iteration\n   - Calculate error reduction: \"üìâ Progress: [X] errors resolved ([Y]% reduction)\"\n   - Identify new errors introduced (if any)\n   - Detect persistent errors (same signatures)\n\n3. **Error Signature Comparison:**\n   - Generate current error signatures\n   - Compare with PREVIOUS_ERROR_SIGNATURES\n   - Identify stuck errors: signatures that appear in consecutive iterations\n\n4. **Safety Mechanism Application:**\n   - If CURRENT_ERRORS = 0: Proceed to Phase 4 (Success)\n   - If ITERATION_COUNT >= MAX_ITERATIONS: \n     Report: \"‚ö†Ô∏è Maximum iterations reached. [X] persistent errors require manual review.\"\n     List persistent errors with file locations and STOP\n   - If error signatures match PREVIOUS_ERROR_SIGNATURES exactly:\n     Report: \"üîÑ Stuck errors detected. The following errors persist across iterations:\"\n     List stuck errors with detailed analysis and STOP\n   - Otherwise: Update tracking variables and continue\n\n5. **Iteration Logging:**\n   Record iteration results:\n   ```\n   ERROR_TRACKING_LOG.iterations.push({\n     iteration: [number],\n     errors_found: [number],\n     errors_fixed: [number],\n     error_breakdown: [category_counts],\n     fixes_applied: [fix_list],\n     persistent_errors: [error_list]\n   })\n   ```\n\n=== PHASE 4: FINAL VALIDATION AND COMPREHENSIVE REPORTING ===\n1. **Final Comprehensive Check:**\n   - Execute final `npx tsc --noEmit` validation\n   - Parse output with full error analysis\n   - Confirm ZERO errors with explicit count verification\n\n2. **Success Report Generation:**\n   Generate detailed completion report:\n   ```\n   ‚úÖ TYPESCRIPT VALIDATION COMPLETE\n   \n   üìä SUMMARY STATISTICS:\n   - Initial Errors: [X]\n   - Final Errors: 0\n   - Total Iterations: [Y]\n   - Total Fixes Applied: [Z]\n   - Success Rate: 100%\n   \n   üìà PROGRESS BREAKDOWN:\n   [For each iteration: \"Iteration [N]: [X] ‚Üí [Y] errors ([Z] fixed)\"]\n   \n   üîß FIXES APPLIED BY CATEGORY:\n   - Syntax Fixes: [count] ([percentage]%)\n   - Type Fixes: [count] ([percentage]%)\n   - Import Fixes: [count] ([percentage]%)\n   - Configuration Fixes: [count] ([percentage]%)\n   \n   üìÅ FILES MODIFIED:\n   [List of all files that were modified with fix counts]\n   \n   ‚è±Ô∏è RESOLUTION EFFICIENCY:\n   - Average fixes per iteration: [number]\n   - Most common error type: [category]\n   - Most complex fixes: [list top 3]\n   ```\n\n=== ENHANCED ERROR REPORTING REQUIREMENTS ===\n1. **Initial Error Count Reporting:**\n   - Total count with percentage breakdown by category\n   - Error density per file (errors per 100 lines)\n   - Severity assessment (critical vs warning level)\n\n2. **Error Signature Tracking:**\n   - Unique signature format: \"[ERROR_CODE]:[FILE_PATH]:[LINE]:[COLUMN]:[MESSAGE_HASH]\"\n   - Signature persistence tracking across iterations\n   - New error detection (signatures not in previous iterations)\n\n3. **Fix Documentation Standards:**\n   - Every fix must include: file path, line number, error type, fix description\n   - Fix categorization: SYNTAX, TYPE, IMPORT, CONFIG, OTHER\n   - Fix complexity rating: SIMPLE, MODERATE, COMPLEX\n   - Before/after code snippets for complex fixes\n\n4. **Progress Reporting:**\n   - Error count progression: \"[Initial] ‚Üí [Current] ([Percentage] reduction)\"\n   - Category-specific progress tracking\n   - Iteration efficiency metrics\n   - Time-to-resolution estimates\n\n=== SAFETY MECHANISMS AND ERROR HANDLING ===\n- **Loop Prevention:** Maximum 5 iterations with early termination\n- **Stuck Error Detection:** Signature comparison across iterations\n- **Regression Detection:** New errors introduced by fixes\n- **Graceful Failure:** Clear reporting for manual intervention cases\n- **Resource Monitoring:** Track compilation time and memory usage\n\n=== EXECUTION NOTES ===\n- Always execute TypeScript compiler in client directory\n- Maintain structured ERROR_TRACKING_LOG throughout process\n- Provide real-time status updates with progress indicators\n- Use consistent error signature format for tracking\n- Include file modification timestamps in fix logs\n- Ensure all error categories are properly classified\n- Generate machine-readable output for potential automation"
  }
}