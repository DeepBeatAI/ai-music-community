'use client'
import { useState, useEffect } from 'react';
import { getBestAudioUrl } from '@/utils/audio';

interface AudioDebuggerProps {
  audioUrl: string;
  postId: string;
}

export default function AudioDebugger({ audioUrl, postId }: AudioDebuggerProps) {
  const [debugInfo, setDebugInfo] = useState<any>(null);
  const [isVisible, setIsVisible] = useState(false);

  useEffect(() => {
    const debugAudioUrl = async () => {
      const info = {
        originalUrl: audioUrl,
        urlType: audioUrl.includes('/object/public/') ? 'public' : 
                 audioUrl.includes('/object/sign/') ? 'signed' : 'unknown',
        timestamp: new Date().toISOString(),
        postId,
        isExpired: false
      };

      // Check if signed URL is expired and show detailed info
      if (audioUrl.includes('/object/sign/') && audioUrl.includes('token=')) {
        try {
          const tokenPart = audioUrl.split('token=')[1];
          const token = tokenPart.split('&')[0];
          const payload = JSON.parse(atob(token.split('.')[1]));
          const expiry = payload.exp;
          const issuedAt = payload.iat;
          const now = Math.floor(Date.now() / 1000);
          
          info.isExpired = now > expiry;
          info.expiryTime = new Date(expiry * 1000).toISOString();
          info.issuedTime = new Date(issuedAt * 1000).toISOString();
          info.timeToExpiry = expiry - now;
          info.ageInHours = (now - issuedAt) / 3600;
          
          if (info.isExpired) {
            info.expiredFor = now - expiry;
          }
        } catch (error) {
          info.tokenParseError = error.message;
        }
      }

      try {
        const bestUrl = await getBestAudioUrl(audioUrl);
        info.bestUrl = bestUrl;
        info.urlWorking = !!bestUrl && bestUrl !== null;
        info.urlChanged = bestUrl !== audioUrl;
      } catch (error) {
        info.error = error.message;
        info.urlWorking = false;
      }

      setDebugInfo(info);
    };

    debugAudioUrl();
  }, [audioUrl, postId]);

  if (!debugInfo) return null;

  return (
    <div className="mt-2">
      <button
        onClick={() => setIsVisible(!isVisible)}
        className="text-xs text-gray-500 hover:text-gray-400 transition-colors"
      >
        üîß Debug Audio URL {debugInfo.isExpired && '‚è∞'} {!debugInfo.urlWorking && '‚ùå'}
      </button>
      
      {isVisible && (
        <div className="mt-2 p-3 bg-gray-900 rounded-lg text-xs font-mono border border-gray-600">
          <div className="space-y-2">
            <div><strong className="text-blue-400">Post ID:</strong> {debugInfo.postId}</div>
            <div><strong className="text-blue-400">URL Type:</strong> {debugInfo.urlType}</div>
            <div><strong className="text-blue-400">Working:</strong> {debugInfo.urlWorking ? '‚úÖ Yes' : '‚ùå No'}</div>
            {debugInfo.isExpired && (
              <>
                <div className="text-red-400"><strong>Status:</strong> ‚è∞ EXPIRED {debugInfo.expiredFor ? `${Math.floor(debugInfo.expiredFor / 3600)}h ${Math.floor((debugInfo.expiredFor % 3600) / 60)}m ago` : ''}</div>
                <div className="text-yellow-400"><strong>Expired At:</strong> {debugInfo.expiryTime}</div>
                <div className="text-gray-400"><strong>Age:</strong> {debugInfo.ageInHours ? `${debugInfo.ageInHours.toFixed(1)} hours old` : ''}</div>
              </>
            )}
            {!debugInfo.isExpired && debugInfo.timeToExpiry && (
              <div className="text-green-400"><strong>Expires In:</strong> {Math.floor(debugInfo.timeToExpiry / 60)}m {debugInfo.timeToExpiry % 60}s</div>
            )}
            {debugInfo.urlChanged && (
              <div className="text-green-400"><strong>URL Changed:</strong> ‚úÖ Fresh URL generated</div>
            )}
            <div className="pt-2 border-t border-gray-700">
              <div><strong className="text-blue-400">Original URL:</strong></div>
              <div className="text-gray-300 break-all text-[10px] leading-tight">{debugInfo.originalUrl}</div>
            </div>
            {debugInfo.bestUrl && debugInfo.bestUrl !== debugInfo.originalUrl && (
              <div className="pt-2 border-t border-gray-700">
                <div><strong className="text-green-400">Fresh URL:</strong></div>
                <div className="text-gray-300 break-all text-[10px] leading-tight">{debugInfo.bestUrl}</div>
              </div>
            )}
            {debugInfo.error && (
              <div className="text-red-400 pt-2 border-t border-gray-700">
                <strong>Error:</strong> {debugInfo.error}
              </div>
            )}
            {debugInfo.tokenParseError && (
              <div className="text-yellow-400 pt-2 border-t border-gray-700">
                <strong>Token Parse Error:</strong> {debugInfo.tokenParseError}
              </div>
            )}
          </div>
        </div>
      )}
    </div>
  );
}
